package com.app.customers_utils;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.app.banking.AcType;
import com.app.banking.BankAccount;
import com.app.core.Customer;
import com.app.core.ServicePlan;
import com.app.custom_exception.CustomerException;

import static com.app.customers_utils.CutomersUtils.*;

public class CustomerValidations {
	public static void changePassword(String email, String oldPassword, String newPassword,
			Map<String, Customer> listOfCustomers) throws CustomerException {
		Customer cust = logIn(email, oldPassword, listOfCustomers);
		cust.setPassword(newPassword);
		
	}

	public static String toRemoveCustomer(String email, Map<String, Customer> listOfCustomers)
			throws CustomerException {
		Customer c = listOfCustomers.remove(email);
		if (c == null)
			throw new CustomerException("Invalid email.");
		return "Unsubscribe Successfully - " + c.getFirstName();
	}

//	public static void toRemoveCustomerBornAfter(String dob, String sp,Map<String,Customer> listOfCustomers) throws CustomerException {
//		LocalDate date = validatedate(dob);
//		LinkedList<Customer> list=new LinkedList<>(listOfCustomers.values());
//		Iterator<Customer> itr = list.iterator();
//		ServicePlan plan = ServicePlan.valueOf(sp.toUpperCase());
//		while (itr.hasNext()) {
//			Customer customer = itr.next();
//			if(customer.getSp()==plan && customer.getDob().isAfter(date))
//				itr.remove();
//		}
//		
//	} 
	public static void toRemoveCustomerBornAfter(String dob, String sp, Map<String, Customer> listOfCustomers)
			throws CustomerException {
		LocalDate date = validatedate(dob);
		ServicePlan plan = ServicePlan.valueOf(sp.toUpperCase());
		
		listOfCustomers.values().removeIf( s-> s.getDob().isAfter(date) && s.getSp() == (plan));
		
//		Iterator<Map.Entry<String, Customer>> itr = listOfCustomers.entrySet().iterator();
//		while(itr.hasNext()) {
//			Map.Entry<String, Customer> entry = itr.next();
//			Customer c = entry.getValue();
//			if (c.getSp() == plan && c.getDob().isAfter(date)) {
//				itr.remove();
//			}
//		}
	}
	
	
	public static Map<Integer, BankAccount> populateBankAccounts() {
		BankAccount a1 = new BankAccount(101, "a1", "b1", AcType.SAVINGS, LocalDate.parse("1991-10-27"),
				LocalDate.parse("2011-12-17"), 15000);
		BankAccount a2 = new BankAccount(10, "a2", "b2", AcType.CURRENT, LocalDate.parse("1991-11-18"),
				LocalDate.parse("2012-12-17"), 8000);
		BankAccount a3 = new BankAccount(45, "a3", "b3", AcType.SAVINGS, LocalDate.parse("1991-10-27"),
				LocalDate.parse("2013-12-17"), 18000);
		BankAccount a4 = new BankAccount(56, "a4", "b4", AcType.FD, LocalDate.parse("1992-01-17"),
				LocalDate.parse("2020-12-17"), 150000);
		BankAccount a5 = new BankAccount(25, "a5", "b5", AcType.LOAN, LocalDate.parse("1991-10-27"),
				LocalDate.parse("2019-12-17"), 25000);
		BankAccount a6 = new BankAccount(40, "a6", "b6", AcType.SAVINGS, LocalDate.parse("1991-10-27"),
				LocalDate.parse("2018-12-17"), 23000);
		BankAccount a7 = new BankAccount(10, "a7", "b7", AcType.SAVINGS, LocalDate.parse("1991-03-17"),
				LocalDate.parse("2018-12-11"), 35000);
		BankAccount[] accts = { a1, a2, a3, a4, a5, a6, a7 };
		Map<Integer, BankAccount> map = new HashMap<>();
		for (BankAccount a : accts)
			System.out.println(map.put(a.getAcctNo(), a));
		return map;
	}
	
	//String firstName, String lastName, String email, String password, double regAmount, LocalDate dob,
//	ServicePlan plan
	public static Map<String, Customer> populatedCustomer(){
		Customer c1 = new Customer("John", "Patkar", "john@gmail.com", "Pass@123", 2000, LocalDate.parse("1991-03-17")
				, ServicePlan.GOLD )
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
   
}
