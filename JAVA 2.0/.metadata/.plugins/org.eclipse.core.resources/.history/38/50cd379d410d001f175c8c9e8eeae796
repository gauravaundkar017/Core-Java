package com.app.customer_tester;

import static com.app.customers_utils.CustomerUtils1.changePassword;
import static com.app.customers_utils.CustomerUtils1.populatedCustomer;
import static com.app.customers_utils.CustomerUtils1.toRemoveCustomer;
import static com.app.customers_utils.CustomerUtils1.toRemoveCustomerBornAfter;
import static com.app.customers_utils.CutomersValidations.logIn;
import static com.app.customers_utils.CutomersValidations.validateCustomerDetails;


import java.util.Comparator;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

import com.app.core.Customer;
import com.app.customers_utils.IOUtils;

public class CustomerApp {

	public static void main(String[] args) {
		try (Scanner sc = new Scanner(System.in)) {
			boolean exit = false;
			Map<String, Customer> customers = populatedCustomer();
			while (!exit) {
				System.out.println("Options : 1. Create Customer Account \n"
						+ "2. Display All customers Accounts \n3. Sign in to portal "
						+ "\n4. Change Password \n5. Un subscribe\n6. Sort via email" 
						+ "\n7. sort dob n lname"
						+ "\n8. Remove all customer details from specified plan born after specified date.\n"
						+ "\n9. Add details in file\n"
						+ "\n10. Read Details from file \n"
						+ "0. Exit ");
				System.out.println("Choose an option");
				try {
					switch (sc.nextInt()) {
					case 1:
						System.out.println();
						System.out.println("Enter below details : ");
						System.out.println("firstName, lastName, email, password, regAmount, date, servicePlan");
						Customer customerDetails = validateCustomerDetails(sc.next(), sc.next(), sc.next(), sc.next(),
								sc.nextDouble(), sc.next(), sc.next(), customers);
						customers.put(customerDetails.getEmail(), customerDetails);
						System.out.println("Registration Done..");
						break;
					case 2:
						System.out.println("Display all Customers");
						customers.values().forEach(c->System.out.println(c));

						break;

					case 3:
						System.out.println("Login Page");
						System.out.println("Please Enter Details :- \nEmail    Password ");
						Customer signIn = logIn(sc.next(), sc.next(), customers);
						System.out.println(signIn);

						break;

					case 4:
						System.out.println("Change Password");
						System.out.println("Please Enter Details :- \nEmail    Old_Password     New_Password");
						changePassword(sc.next(), sc.next(), sc.next(), customers);

						break;
					case 5:
						System.out.print("Un-subscribe customer\nEnter your email : ");
						System.out.println(toRemoveCustomer(sc.next(),customers));
						break;
						
					case 6:
						System.out.println("Sort with email");
//						Collections.sort(customers);
//						customers.values().stream().sorted(); //imp comparable
						TreeMap<String, Customer> sortWithEmial = new TreeMap<>(customers);
						sortWithEmial.values().forEach(s->System.out.println(s));
						break;
			
						
//					case 7:
//						System.out.println("Sort with dobn lname");
//						Collections.sort(customers,new CustomerDobLNameComparator());
//						break;
					case 7:
						System.out.println("Sort with dob n lname");
						
						Comparator<Customer> comp = (c1,c2)->{
							int dobComp = c1.getDob().compareTo(c2.getDob());
							if (dobComp == 0) {
								return c1.getLastName().compareTo(c2.getLastName());
							}	
							return dobComp;
						};
						customers.values().stream().sorted(comp).forEach(c->System.out.println(c));;

						
					case 8 :
						System.out.print("Enter date n plan: ");
						toRemoveCustomerBornAfter(sc.next(),sc.next(),customers);
						break;
						
					case 9:
						System.out.println("Store Data in File (Binary Format)");
						IOUtils.writeDetails(customers,sc.next());
						break;
						
					case 10:
						System.out.println("Read Data from File (Binary Format)");
						IOUtils.readDetails(sc.next())
						break;
					case 0:
						exit = true;
						break;

					default:
						break;
					}

				} catch (Exception e) {
					e.printStackTrace();
					sc.nextLine();
				}

			}

		}
		System.out.println("main over...");
	}

}
